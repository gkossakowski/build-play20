diff --git a/framework/project/Build.scala b/framework/project/Build.scala
index c33fda5..5a074b3 100644
--- a/framework/project/Build.scala
+++ b/framework/project/Build.scala
@@ -22,7 +22,7 @@ object PlayBuild extends Build {
             scalacOptions ++= Seq("-encoding", "UTF-8", "-Xlint","-deprecation", "-unchecked"),
             resolvers += typesafe
         )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*)
+    )
 
     lazy val AnormProject = Project(
         "Anorm",
@@ -34,7 +34,7 @@ object PlayBuild extends Build {
             publishArtifact in (Compile, packageDoc) := false,
             publishArtifact in (Compile, packageSrc) := true
         )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*)
+    )
 
     lazy val PlayProject = Project(
         "Play",
@@ -51,7 +51,7 @@ object PlayBuild extends Build {
             sourceGenerators in Compile <+= (dependencyClasspath in TemplatesProject in Runtime, packageBin in TemplatesProject in Compile, scalaSource in Compile, sourceManaged in Compile, streams) map ScalaTemplates,
             compile in (Compile) <<= PostCompile
         )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*).dependsOn(TemplatesProject, AnormProject)
+    ).dependsOn(TemplatesProject, AnormProject)
     
     lazy val PlayTestProject = Project(
       "Play-Test",
@@ -65,7 +65,7 @@ object PlayBuild extends Build {
         publishArtifact in (Compile, packageSrc) := true,
         resolvers += typesafe
       )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*).dependsOn(PlayProject)
+    ).dependsOn(PlayProject)
 
     def registerPlugin(module: ModuleID, localScalaVersion: String= buildScalaVersionForSbt) = 
         libraryDependencies <+= (sbtVersion) {
@@ -79,8 +79,8 @@ object PlayBuild extends Build {
         sbtPlugin := true,
         publishMavenStyle := false,
         libraryDependencies := sbtDependencies,
-        registerPlugin("com.typesafe.sbteclipse" % "sbteclipse-core" % "2.1.0-M2"),
-        registerPlugin("com.github.mpeltonen" % "sbt-idea" % "1.1.0-M2-TYPESAFE"),
+        //registerPlugin("com.typesafe.sbteclipse" % "sbteclipse-core" % "2.1.0-M2"),
+        //registerPlugin("com.github.mpeltonen" % "sbt-idea" % "1.1.0-M2-TYPESAFE"),
         unmanagedJars in Compile ++= sbtJars,
         publishTo := Some(playIvyRepository),
         scalacOptions ++= Seq("-encoding", "UTF-8", "-Xlint","-deprecation", "-unchecked"),
@@ -88,7 +88,7 @@ object PlayBuild extends Build {
         publishArtifact in (Compile, packageSrc) := false,
         resolvers += typesafe
       )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*).dependsOn(PlayProject, TemplatesProject, ConsoleProject)
+    ).dependsOn(PlayProject, TemplatesProject, ConsoleProject)
 
     lazy val ConsoleProject = Project(
       "Console",
@@ -103,7 +103,7 @@ object PlayBuild extends Build {
         publishArtifact in (Compile, packageSrc) := true,
         resolvers += typesafe
       )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*)
+    )
 
     val Root = Project(
         "Root",
@@ -118,15 +118,15 @@ object PlayBuild extends Build {
             publish <<= (publish in PlayProject, publish in TemplatesProject, publish in AnormProject, publish in SbtPluginProject, publish in ConsoleProject, publish in PlayTestProject) map { (_,_,_,_,_,_) => },
             publishLocal <<= (publishLocal in PlayProject, publishLocal in TemplatesProject, publishLocal in AnormProject, publishLocal in SbtPluginProject, publishLocal in ConsoleProject, publishLocal in PlayTestProject) map { (_,_,_,_,_,_) => }
         )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*)
+    )
      .dependsOn(PlayProject).aggregate(AnormProject, TemplatesProject, PlayProject, SbtPluginProject, ConsoleProject, PlayTestProject)
 
     object BuildSettings {
 
         val buildOrganization = "play"
         val buildVersion      = Option(System.getProperty("play.version")).filterNot(_.isEmpty).getOrElse("2.0-unknown")
-        val buildScalaVersion = Option(System.getProperty("scala.version")).getOrElse("2.9.1")
-        val buildScalaVersionForSbt = "2.9.1"
+        val buildScalaVersion = "2.10.0-virtualized-SNAPSHOT"
+        val buildScalaVersionForSbt = "2.10.0-virtualized-SNAPSHOT"
         val buildSbtVersion   = "0.11.3"
 
         val buildSettings = Defaults.defaultSettings ++ Seq (
@@ -134,7 +134,9 @@ object PlayBuild extends Build {
             version        := buildVersion,
             scalaVersion   := buildScalaVersion,
             logManager <<= extraLoggers(PlayLogManager.default),
-            ivyLoggingLevel := UpdateLogging.DownloadOnly
+            ivyLoggingLevel := UpdateLogging.DownloadOnly,
+            resolvers += ivyDefaultLocalRepository,
+            resolvers += mavenLocal
         )
 
     }
@@ -161,9 +163,11 @@ object PlayBuild extends Build {
         import BuildSettings._
         
         val playLocalRepository = Resolver.file("Play Local Repository", file("../repository/local"))(Resolver.ivyStylePatterns) 
-        
+
+        val ivyDefaultLocalRepository = Resolver.url("Default Ivy Local Repository", url(Path.userHome.asURL + "/.ivy2/local"))(Resolver.ivyStylePatterns)
+        val mavenLocal = "Local Maven Repository" at Path.userHome.asURL + "/.m2/repository"       
+
         val typesafe = "Typesafe Repository" at "http://repo.typesafe.com/typesafe/releases/"
-        
         val typesafeReleases = "Typesafe Releases Repository" at "http://repo.typesafe.com/typesafe/maven-releases/"
         val typesafeSnapshot = "Typesafe Snapshots Repository" at "http://repo.typesafe.com/typesafe/maven-snapshots/"
         val playRepository = if (buildVersion.endsWith("SNAPSHOT")) typesafeSnapshot else typesafeReleases
diff --git a/framework/project/plugins.sbt b/framework/project/plugins.sbt
index 483e642..cf8c488 100644
--- a/framework/project/plugins.sbt
+++ b/framework/project/plugins.sbt
@@ -2,4 +2,3 @@ logLevel := Level.Warn
 
 resolvers += Classpaths.typesafeResolver
 
-addSbtPlugin("com.typesafe.sbtscalariform" % "sbtscalariform" % "0.3.1")
diff --git a/framework/sbt/play.boot.properties b/framework/sbt/play.boot.properties
index f1a6b53..fab8cbc 100644
--- a/framework/sbt/play.boot.properties
+++ b/framework/sbt/play.boot.properties
@@ -1,5 +1,5 @@
 [scala]
-  version: 2.9.1
+  version: 2.10.0-virtualized-SNAPSHOT
 
 [app]
   org: play
@@ -9,6 +9,8 @@
   cross-versioned: true
 
 [repositories]
+  m2-local: file://__HOME__/.m2/repository
+  ivy2-local: file://__HOME__/.ivy2/local, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext]
   local
   maven-local
   typesafe-ivy-releases: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext]
diff --git a/framework/sbt/sbt.boot.properties b/framework/sbt/sbt.boot.properties
index 26ba9c8..b029afe 100644
--- a/framework/sbt/sbt.boot.properties
+++ b/framework/sbt/sbt.boot.properties
@@ -1,5 +1,5 @@
 [scala]
-  version: 2.9.1
+  version: 2.10.0-virtualized-SNAPSHOT
 
 [app]
   org: org.scala-sbt
@@ -10,6 +10,8 @@
   cross-versioned: true
 
 [repositories]
+  m2-local: file://__HOME__/.m2/repository
+  ivy2-local: file://__HOME__/.ivy2/local, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext]
   local
   maven-local
   typesafe-ivy-releases: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext]
diff --git a/framework/src/play/src/main/java/play/Application.java b/framework/src/play/src/main/java/play/Application.java
index 85a2dd7..b2a78db 100644
--- a/framework/src/play/src/main/java/play/Application.java
+++ b/framework/src/play/src/main/java/play/Application.java
@@ -99,9 +99,10 @@ public class Application {
      * @return a set of types names statifying the condition
      */
     public Set<String> getTypesAnnotatedWith(String packageName, Class<? extends java.lang.annotation.Annotation> annotation) {
-        return scala.collection.JavaConverters.setAsJavaSetConverter(
-            application.getTypesAnnotatedWith(packageName, annotation)
-        ).asJava();
+        // return scala.collection.JavaConverters.setAsJavaSetConverter(
+        //     application.getTypesAnnotatedWith(packageName, annotation)
+        // ).asJava();
+        throw new RuntimeException("ouch!");
     }
     
     /**
diff --git a/framework/src/play/src/main/java/play/Configuration.java b/framework/src/play/src/main/java/play/Configuration.java
index 7e9481c..04a6af9 100644
--- a/framework/src/play/src/main/java/play/Configuration.java
+++ b/framework/src/play/src/main/java/play/Configuration.java
@@ -104,7 +104,8 @@ public class Configuration {
      * @return the set of keys available in this configuration
      */
     public Set<String> keys() {
-        return JavaConverters.setAsJavaSetConverter(conf.keys()).asJava();
+        //return JavaConverters.setAsJavaSetConverter(conf.keys()).asJava();
+        throw new RuntimeException("ouch!");
     }
     
     /**
diff --git a/framework/src/play/src/main/java/play/i18n/Messages.java b/framework/src/play/src/main/java/play/i18n/Messages.java
index 96d2361..f79c694 100644
--- a/framework/src/play/src/main/java/play/i18n/Messages.java
+++ b/framework/src/play/src/main/java/play/i18n/Messages.java
@@ -20,8 +20,9 @@ public class Messages {
     * @return the formatted message or a default rendering if the key wasn't defined
     */
     public static String get(Lang lang, String key, Object... args) {
-        Buffer<Object> scalaArgs = scala.collection.JavaConverters.asScalaBufferConverter(Arrays.asList(args)).asScala();
-        return play.api.i18n.Messages.apply(key, scalaArgs, lang);
+        // Buffer<Object> scalaArgs = scala.collection.JavaConverters.asScalaBufferConverter(Arrays.asList(args)).asScala();
+        // return play.api.i18n.Messages.apply(key, scalaArgs, lang);
+        throw new RuntimeException("ouch!");
     }
     
     /**
@@ -34,8 +35,9 @@ public class Messages {
     * @return the formatted message or a default rendering if the key wasn't defined
     */
     public static String get(String key, Object... args) {
-        Buffer<Object> scalaArgs = scala.collection.JavaConverters.asScalaBufferConverter(Arrays.asList(args)).asScala();
-        return play.api.i18n.Messages.apply(key, scalaArgs, play.mvc.Http.Context.Implicit.lang());
+        // Buffer<Object> scalaArgs = scala.collection.JavaConverters.asScalaBufferConverter(Arrays.asList(args)).asScala();
+        // return play.api.i18n.Messages.apply(key, scalaArgs, play.mvc.Http.Context.Implicit.lang());
+        throw new RuntimeException("ouch!");
     }
     
 }
diff --git a/framework/src/play/src/main/java/play/libs/F.java b/framework/src/play/src/main/java/play/libs/F.java
index 28f4a7c..1fcec33 100644
--- a/framework/src/play/src/main/java/play/libs/F.java
+++ b/framework/src/play/src/main/java/play/libs/F.java
@@ -216,19 +216,20 @@ public class F {
          *      exception.
          */
         public Promise<A> recover(final Function<Throwable,A> function) {
-            return new Promise<A>(
-              promise.recover(new play.api.libs.concurrent.Recover<A>(){
-                  public A recover(Throwable t){
-                      try {
-                          return function.apply(t);
-                      } catch (RuntimeException e) {
-                          throw e;
-                      } catch (Throwable tt) {
-                          throw new RuntimeException(tt);
-                      }
-                  }
-              })
-            );
+            // return new Promise<A>(
+            //   promise.recover(new play.api.libs.concurrent.Recover<A>(){
+            //       public A recover(Throwable t){
+            //           try {
+            //               return function.apply(t);
+            //           } catch (RuntimeException e) {
+            //               throw e;
+            //           } catch (Throwable tt) {
+            //               throw new RuntimeException(tt);
+            //           }
+            //       }
+            //   })
+            // );
+	    throw new RuntimeException("ouch!");
         }
 
         /**
diff --git a/framework/src/play/src/main/java/play/libs/Scala.java b/framework/src/play/src/main/java/play/libs/Scala.java
index b27b8ba..ccd7bf9 100644
--- a/framework/src/play/src/main/java/play/libs/Scala.java
+++ b/framework/src/play/src/main/java/play/libs/Scala.java
@@ -21,30 +21,34 @@ public class Scala {
      * Converts a Scala Map to Java.
      */
     public static <K,V> java.util.Map<K,V> asJava(scala.collection.Map<K,V> scalaMap) {
-       return scala.collection.JavaConverters.asJavaMapConverter(scalaMap).asJava();
+	//return scala.collection.JavaConverters.asJavaMapConverter(scalaMap).asJava();
+        throw new RuntimeException("ouch!");
     }
     
     /**
      * Converts a Java Map to Scala.
      */
     public static <A,B> scala.collection.immutable.Map<A,B> asScala(Map<A,B> javaMap) {
-        return play.utils.Conversions.newMap(
-            scala.collection.JavaConverters.asScalaMapConverter(javaMap).asScala().toSeq()
-        );
+        // return play.utils.Conversions.newMap(
+        //     scala.collection.JavaConverters.asScalaMapConverter(javaMap).asScala().toSeq()
+        // );
+        throw new RuntimeException("ouch!");
     } 
 
     /**
      * Converts a Scala List to Java.
      */
     public static <T> java.util.List<T> asJava(scala.collection.Seq<T> scalaList) {
-       return scala.collection.JavaConverters.asJavaListConverter(scalaList).asJava();
+	//return scala.collection.JavaConverters.asJavaListConverter(scalaList).asJava();
+        throw new RuntimeException("ouch!");
     }
 
     /**
      * Converts a Java List to Scala Seq.
      */
     public static <T> scala.collection.Seq<T> toSeq(java.util.List<T> list) {
-        return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList();
+        //return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList();
+        throw new RuntimeException("ouch!");
     }
 
     /**
diff --git a/framework/src/play/src/main/java/play/mvc/Results.java b/framework/src/play/src/main/java/play/mvc/Results.java
index 0ab2de0..bc9edd4 100644
--- a/framework/src/play/src/main/java/play/mvc/Results.java
+++ b/framework/src/play/src/main/java/play/mvc/Results.java
@@ -1122,11 +1122,13 @@ public class Results {
             if(content == null) {
                 throw new NullPointerException("null content");
             }
-            wrappedResult = status.stream(
-                play.core.j.JavaResults.chunked(content, chunkSize), 
-                play.core.j.JavaResults.writeBytes(),
-                play.core.j.JavaResults.contentTypeOfBytes()
-            );
+            // wrappedResult = status.stream(
+            //     play.core.j.JavaResults.chunked(content, chunkSize), 
+            //     play.core.j.JavaResults.writeBytes(),
+            //     play.core.j.JavaResults.contentTypeOfBytes()
+            // );
+            wrappedResult = null;
+            throw new RuntimeException("Should never get here. Ouch!");
         }
         
         public Status(play.api.mvc.Results.Status status, File content, int chunkSize) {
diff --git a/framework/src/play/src/main/scala/play/api/db/evolutions/Evolutions.scala b/framework/src/play/src/main/scala/play/api/db/evolutions/Evolutions.scala
index 7cbf5a4..55278d7 100644
--- a/framework/src/play/src/main/scala/play/api/db/evolutions/Evolutions.scala
+++ b/framework/src/play/src/main/scala/play/api/db/evolutions/Evolutions.scala
@@ -293,7 +293,7 @@ object Evolutions {
     val ups = (nonConflictingUps ++ conflictingUps).reverse.map(e => UpScript(e, e.sql_up))
     val downs = (nonConflictingDowns ++ conflictingDowns).map(e => DownScript(e, e.sql_down))
 
-    downs ++ ups
+    (downs ++ ups).asInstanceOf[Seq[Product with Serializable with Script]]
   }
 
   /**
diff --git a/framework/src/play/src/main/scala/play/api/mvc/Results.scala b/framework/src/play/src/main/scala/play/api/mvc/Results.scala
index 1744f5d..d27c7b2 100644
--- a/framework/src/play/src/main/scala/play/api/mvc/Results.scala
+++ b/framework/src/play/src/main/scala/play/api/mvc/Results.scala
@@ -40,7 +40,7 @@ object Result {
    * }}}
    */
   def unapply(result: Result): Option[(Int, Map[String, String])] = result match {
-    case r: PlainResult => Some(r.header.status, r.header.headers)
+    case r: PlainResult => Some((r.header.status, r.header.headers))
     case _ => None
   }
 
diff --git a/framework/src/play/src/main/scala/play/core/j/JavaAction.scala b/framework/src/play/src/main/scala/play/core/j/JavaAction.scala
index 60a7db5..76602bd 100644
--- a/framework/src/play/src/main/scala/play/core/j/JavaAction.scala
+++ b/framework/src/play/src/main/scala/play/core/j/JavaAction.scala
@@ -38,12 +38,12 @@ trait JavaAction extends Action[play.mvc.Http.RequestBody] with JavaHelpers {
     }
 
     // Wrap into user defined Global action
-    val baseAction = play.api.Play.maybeApplication.map { app =>
+    val baseAction: JAction[Any] = play.api.Play.maybeApplication.map { app =>
       app.global match {
         case global: JavaGlobalSettingsAdapter => {
           val action = global.underlying.onRequest(javaContext.request, method)
           action.delegate = rootAction
-          action
+          action.asInstanceOf[JAction[Any]]
         }
         case _ => rootAction
       }
@@ -62,9 +62,9 @@ trait JavaAction extends Action[play.mvc.Http.RequestBody] with JavaHelpers {
       }.flatten.reverse
     }
 
-    val finalAction = actionMixins.foldLeft[JAction[_ <: Any]](baseAction) {
+    val finalAction = actionMixins.foldLeft[JAction[Any]](baseAction) {
       case (delegate, (annotation, actionClass)) => {
-        val action = actionClass.newInstance
+        val action = actionClass.newInstance().asInstanceOf[JAction[Any]]
         action.configuration = annotation
         action.delegate = delegate
         action
diff --git a/framework/src/play/src/main/scala/play/core/server/netty/Helpers.scala b/framework/src/play/src/main/scala/play/core/server/netty/Helpers.scala
index 4b6f63d..9135bbb 100644
--- a/framework/src/play/src/main/scala/play/core/server/netty/Helpers.scala
+++ b/framework/src/play/src/main/scala/play/core/server/netty/Helpers.scala
@@ -46,7 +46,7 @@ private[netty] trait Helpers {
     }.toMap
 
     new Headers {
-      def getAll(key: String) = headers.get(key.toUpperCase).flatten.toSeq
+      def getAll(key: String) = headers.get(key.toUpperCase).toSeq.flatten
       def keys = headers.keySet
       override def toString = headers.toString
     }
diff --git a/framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala b/framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala
index 2c34c27..3a4f553 100644
--- a/framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala
+++ b/framework/src/play/src/main/scala/play/core/server/netty/PlayDefaultUpstreamHandler.scala
@@ -252,7 +252,7 @@ private[server] class PlayDefaultUpstreamHandler(server: Server, allChannels: De
                     )
 
                   }
-                  case _ => Promise.pure()
+                  case _ => Promise.pure(())
                 }
              }
 
diff --git a/framework/src/sbt-plugin/src/main/scala/PlayCommands.scala b/framework/src/sbt-plugin/src/main/scala/PlayCommands.scala
index cb88775..c1ed4fb 100644
--- a/framework/src/sbt-plugin/src/main/scala/PlayCommands.scala
+++ b/framework/src/sbt-plugin/src/main/scala/PlayCommands.scala
@@ -209,16 +209,16 @@ exec java $* -cp "`dirname $0`/lib/*" """ + customFileName.map(fn => "-Dconfig.f
   }
 
 
-  def intellijCommandSettings(mainLang: String) = {
-    import org.sbtidea.SbtIdeaPlugin
-    SbtIdeaPlugin.ideaSettings ++ 
-    Seq(
-      SbtIdeaPlugin.commandName := "idea",
-      SbtIdeaPlugin.addGeneratedClasses := true,
-      SbtIdeaPlugin.includeScalaFacet := {mainLang == SCALA},
-      SbtIdeaPlugin.defaultClassifierPolicy := false
-    )
-  }
+  // def intellijCommandSettings(mainLang: String) = {
+  //   import org.sbtidea.SbtIdeaPlugin
+  //   SbtIdeaPlugin.ideaSettings ++ 
+  //   Seq(
+  //     SbtIdeaPlugin.commandName := "idea",
+  //     SbtIdeaPlugin.addGeneratedClasses := true,
+  //     SbtIdeaPlugin.includeScalaFacet := {mainLang == SCALA},
+  //     SbtIdeaPlugin.defaultClassifierPolicy := false
+  //   )
+  // }
 
   val playStage = TaskKey[Unit]("stage")
   val playStageTask = (baseDirectory, playPackageEverything, dependencyClasspath in Runtime, target, streams) map { (root, packaged, dependencies, target, s) =>
@@ -868,7 +868,7 @@ exec java $* -cp "`dirname $0`/lib/*" """ + customFileName.map(fn => "-Dconfig.f
 
         (module \ "revision").map { rev =>
           Map(
-            'module -> (module \ "@organisation" text, module \ "@name" text, rev \ "@name"),
+            'module -> ((module \ "@organisation" text, module \ "@name" text, rev \ "@name")),
             'evictedBy -> (rev \ "evicted-by").headOption.map(_ \ "@rev" text),
             'requiredBy -> (rev \ "caller").map { caller =>
               (caller \ "@organisation" text, caller \ "@name" text, caller \ "@callerrev" text)
@@ -914,14 +914,14 @@ exec java $* -cp "`dirname $0`/lib/*" """ + customFileName.map(fn => "-Dconfig.f
               case callers: Seq[_] => callers.map {
                 case (org, name, rev) => org.toString + ":" + name.toString + ":" + rev.toString
               }
-            }.flatten.toSeq,
+            }.toSeq.flatten,
 
             module.get('evictedBy).map {
               case Some(rev) => Seq("Evicted by " + rev)
               case None => module.get('artifacts).map {
                 case artifacts: Seq[_] => artifacts.map("As " + _.toString)
-              }.flatten
-            }.flatten.toSeq)
+              }.toSeq.flatten
+            }.toSeq.flatten)
           val maxLines = Seq(formatted._1.size, formatted._2.size, formatted._3.size).max
 
           formatted._1.padTo(maxLines, "").zip(
diff --git a/framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala b/framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala
index fe9a5f5..9381274 100644
--- a/framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala
+++ b/framework/src/sbt-plugin/src/main/scala/PlayEclipse.scala
@@ -17,108 +17,108 @@ trait PlayEclipse {
       }
   }
 
- /**
-   * provides Settings for the eclipse project
-   * @param mainLang mainly scala or java?
-   */
-  def eclipseCommandSettings(mainLang: String) = {
-    import com.typesafe.sbteclipse.core._
-    import com.typesafe.sbteclipse.core.EclipsePlugin._
-    import com.typesafe.sbteclipse.core.Validation
-    import scala.xml._
-    import scala.xml.transform.RewriteRule
+ // /**
+ //   * provides Settings for the eclipse project
+ //   * @param mainLang mainly scala or java?
+ //   */
+ //  def eclipseCommandSettings(mainLang: String) = {
+ //    import com.typesafe.sbteclipse.core._
+ //    import com.typesafe.sbteclipse.core.EclipsePlugin._
+ //    import com.typesafe.sbteclipse.core.Validation
+ //    import scala.xml._
+ //    import scala.xml.transform.RewriteRule
 
-    val f = java.io.File.separator
+ //    val f = java.io.File.separator
 
 
    
-    def err(node: Node) = throw new RuntimeException("error proccessing "+ Node)
+ //    def err(node: Node) = throw new RuntimeException("error proccessing "+ Node)
 
-    lazy val addClassesManaged = new EclipseTransformerFactory[RewriteRule] {
-          override def createTransformer(ref: ProjectRef, state: State): Validation[RewriteRule] = {
-            setting(crossTarget in ref,  state) map { ct =>
-              new RewriteRule {
-                override def transform(node: Node): Seq[Node] = node match {
-                  //add classes_managed  
-                  case elem if (elem.label == "classpathentry" && elem.attribute("path").getOrElse(err(elem)).toString.contains("org.scala-ide.sdt.launching.SCALA_CONTAINER")) =>
-                    <classpathentry path={ct + java.io.File.separator + "classes_managed"} kind="lib"></classpathentry>
-                 case other =>
-                    other  
-                }
-              }
-            }
-          }
-    } 
+ //    lazy val addClassesManaged = new EclipseTransformerFactory[RewriteRule] {
+ //          override def createTransformer(ref: ProjectRef, state: State): Validation[RewriteRule] = {
+ //            setting(crossTarget in ref,  state) map { ct =>
+ //              new RewriteRule {
+ //                override def transform(node: Node): Seq[Node] = node match {
+ //                  //add classes_managed  
+ //                  case elem if (elem.label == "classpathentry" && elem.attribute("path").getOrElse(err(elem)).toString.contains("org.scala-ide.sdt.launching.SCALA_CONTAINER")) =>
+ //                    <classpathentry path={ct + java.io.File.separator + "classes_managed"} kind="lib"></classpathentry>
+ //                 case other =>
+ //                    other  
+ //                }
+ //              }
+ //            }
+ //          }
+ //    } 
 
-    lazy val addJavaBuilder = new EclipseTransformerFactory[RewriteRule] {
-          override def createTransformer(ref: ProjectRef, state: State): Validation[RewriteRule] = {
-            setting(crossTarget in ref,  state) map { ct =>
-              new RewriteRule {
-                override def transform(node: Node): Seq[Node] = node match {
-                  //add javabuilder
-                  case elem if (elem.text == "org.scala-ide.sdt.core.scalabuilder") =>
-                     <name>org.eclipse.jdt.core.javabuilder</name>
-                  //remove scala nature   
-                  case elem if (elem.text == "org.scala-ide.sdt.core.scalanature") =>
-                     <name></name>
-                 case other =>
-                    other  
-                }
-              }
-            }
-          }
-    } 
+ //    lazy val addJavaBuilder = new EclipseTransformerFactory[RewriteRule] {
+ //          override def createTransformer(ref: ProjectRef, state: State): Validation[RewriteRule] = {
+ //            setting(crossTarget in ref,  state) map { ct =>
+ //              new RewriteRule {
+ //                override def transform(node: Node): Seq[Node] = node match {
+ //                  //add javabuilder
+ //                  case elem if (elem.text == "org.scala-ide.sdt.core.scalabuilder") =>
+ //                     <name>org.eclipse.jdt.core.javabuilder</name>
+ //                  //remove scala nature   
+ //                  case elem if (elem.text == "org.scala-ide.sdt.core.scalanature") =>
+ //                     <name></name>
+ //                 case other =>
+ //                    other  
+ //                }
+ //              }
+ //            }
+ //          }
+ //    } 
 
-     lazy val addScalaLib = new EclipseTransformerFactory[RewriteRule] {
-          override def createTransformer(ref: ProjectRef, state: State): Validation[RewriteRule] = {
-            evaluateTask(dependencyClasspath in Runtime, ref,  state) map { classpath =>
-              val scalaLib = classpath.filter(_.data.getAbsolutePath.contains("scala-library.jar")).headOption.map(_.data.getAbsolutePath).getOrElse(throw new RuntimeException("could not find scala-library.jar"))
-              new RewriteRule {
-                override def transform(node: Node): Seq[Node] = node match {
-                  //add scala-library.jar
-                  case elem if (elem.label == "classpath") =>
-                    val newChild = elem.child ++ <classpathentry path={scalaLib} kind="lib"></classpathentry>
-                    Elem(elem.prefix, "classpath", elem.attributes, elem.scope, newChild: _*)
-                  case other =>
-                    other  
-                }
-              }
-            }
-          }
-    }  
+ //     lazy val addScalaLib = new EclipseTransformerFactory[RewriteRule] {
+ //          override def createTransformer(ref: ProjectRef, state: State): Validation[RewriteRule] = {
+ //            evaluateTask(dependencyClasspath in Runtime, ref,  state) map { classpath =>
+ //              val scalaLib = classpath.filter(_.data.getAbsolutePath.contains("scala-library.jar")).headOption.map(_.data.getAbsolutePath).getOrElse(throw new RuntimeException("could not find scala-library.jar"))
+ //              new RewriteRule {
+ //                override def transform(node: Node): Seq[Node] = node match {
+ //                  //add scala-library.jar
+ //                  case elem if (elem.label == "classpath") =>
+ //                    val newChild = elem.child ++ <classpathentry path={scalaLib} kind="lib"></classpathentry>
+ //                    Elem(elem.prefix, "classpath", elem.attributes, elem.scope, newChild: _*)
+ //                  case other =>
+ //                    other  
+ //                }
+ //              }
+ //            }
+ //          }
+ //    }  
 
-    lazy val addSourcesManaged = new EclipseTransformerFactory[RewriteRule] {
-          override def createTransformer(ref: ProjectRef, state: State): Validation[RewriteRule] = {
-            setting(crossTarget in ref, state) map { ct =>
-              new RewriteRule {
-                override def transform(node: Node): Seq[Node] = node match {
-                  //add src_managed/main
-                  case elem if (elem.label == "classpath") =>
-                    val newChild = elem.child ++ <classpathentry path={"target" + f + ct.getName + f + "src_managed"+ f + "main" } kind="src"></classpathentry>
-                    Elem(elem.prefix, "classpath", elem.attributes, elem.scope, newChild: _*)
-                 case other =>
-                    other  
-                }
-              }
-            }
-          }
-    }  
+ //    lazy val addSourcesManaged = new EclipseTransformerFactory[RewriteRule] {
+ //          override def createTransformer(ref: ProjectRef, state: State): Validation[RewriteRule] = {
+ //            setting(crossTarget in ref, state) map { ct =>
+ //              new RewriteRule {
+ //                override def transform(node: Node): Seq[Node] = node match {
+ //                  //add src_managed/main
+ //                  case elem if (elem.label == "classpath") =>
+ //                    val newChild = elem.child ++ <classpathentry path={"target" + f + ct.getName + f + "src_managed"+ f + "main" } kind="src"></classpathentry>
+ //                    Elem(elem.prefix, "classpath", elem.attributes, elem.scope, newChild: _*)
+ //                 case other =>
+ //                    other  
+ //                }
+ //              }
+ //            }
+ //          }
+ //    }  
 
-    //setup project file
-    val projectTransformers = if (mainLang == SCALA) Seq[EclipseTransformerFactory[RewriteRule]]() else Seq(addJavaBuilder)
+ //    //setup project file
+ //    val projectTransformers = if (mainLang == SCALA) Seq[EclipseTransformerFactory[RewriteRule]]() else Seq(addJavaBuilder)
 
-    //setup classpath
-    val classPathTransformers = if (mainLang == SCALA) Seq(addSourcesManaged) else Seq(addClassesManaged, addScalaLib)
+ //    //setup classpath
+ //    val classPathTransformers = if (mainLang == SCALA) Seq(addSourcesManaged) else Seq(addClassesManaged, addScalaLib)
 
-    //generate JDT pref file if needed
-    generateJavaPrefFile(mainLang)
+ //    //generate JDT pref file if needed
+ //    generateJavaPrefFile(mainLang)
 
-    //setup sbteclipse
-    EclipsePlugin.eclipseSettings ++ Seq(EclipseKeys.commandName := "eclipsify",
-      EclipseKeys.createSrc := EclipseCreateSrc.Default,
-      EclipseKeys.eclipseOutput := Some(".target"),
-      EclipseKeys.preTasks := Seq(compile in Compile),
-      EclipseKeys.projectTransformerFactories := projectTransformers,
-      EclipseKeys.classpathTransformerFactories := classPathTransformers)
-  }
-}
\ No newline at end of file
+ //    //setup sbteclipse
+ //    EclipsePlugin.eclipseSettings ++ Seq(EclipseKeys.commandName := "eclipsify",
+ //      EclipseKeys.createSrc := EclipseCreateSrc.Default,
+ //      EclipseKeys.eclipseOutput := Some(".target"),
+ //      EclipseKeys.preTasks := Seq(compile in Compile),
+ //      EclipseKeys.projectTransformerFactories := projectTransformers,
+ //      EclipseKeys.classpathTransformerFactories := classPathTransformers)
+ //  }
+}
diff --git a/framework/src/sbt-plugin/src/main/scala/PlayProject.scala b/framework/src/sbt-plugin/src/main/scala/PlayProject.scala
index 42ae3bc..d8dc7a7 100644
--- a/framework/src/sbt-plugin/src/main/scala/PlayProject.scala
+++ b/framework/src/sbt-plugin/src/main/scala/PlayProject.scala
@@ -37,7 +37,7 @@ object PlayProject extends Plugin with PlayExceptions with PlayKeys with PlayRel
   def apply(name: String, applicationVersion: String = "1.0", dependencies: Seq[ModuleID] = Nil, path: File = file("."), mainLang: String = NONE, settings: => Seq[Setting[_]] = Defaults.defaultSettings ): Project = {
     
     lazy val playSettings = 
-      PlayProject.defaultSettings ++ eclipseCommandSettings(mainLang) ++ intellijCommandSettings(mainLang)  ++ Seq(testListeners += testListener) ++ whichLang(mainLang) ++ Seq(
+      PlayProject.defaultSettings ++ Seq(testListeners += testListener) ++ whichLang(mainLang) ++ Seq(
         scalacOptions ++= Seq("-deprecation", "-unchecked", "-Xcheckinit", "-encoding", "utf8"),
         javacOptions ++= Seq("-encoding", "utf8", "-g"),
         version := applicationVersion,
