diff --git a/framework/project/Build.scala b/framework/project/Build.scala
index 84cd6d9..f7a8ceb 100644
--- a/framework/project/Build.scala
+++ b/framework/project/Build.scala
@@ -23,7 +23,7 @@ object PlayBuild extends Build {
             javacOptions ++= Seq("-encoding", "utf8"),
             resolvers += typesafe
         )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*)
+    )
 
     lazy val AnormProject = Project(
         "Anorm",
@@ -36,7 +36,7 @@ object PlayBuild extends Build {
             publishArtifact in (Compile, packageDoc) := false,
             publishArtifact in (Compile, packageSrc) := false
         )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*)
+    )
 
     lazy val PlayProject = Project(
         "Play",
@@ -53,7 +53,7 @@ object PlayBuild extends Build {
             sourceGenerators in Compile <+= (dependencyClasspath in TemplatesProject in Runtime, packageBin in TemplatesProject in Compile, scalaSource in Compile, sourceManaged in Compile, streams) map ScalaTemplates,
             compile in (Compile) <<= PostCompile
         )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*).dependsOn(TemplatesProject, AnormProject)
+    ).dependsOn(TemplatesProject, AnormProject)
     
     lazy val PlayTestProject = Project(
       "Play-Test",
@@ -67,7 +67,7 @@ object PlayBuild extends Build {
         publishArtifact in (Compile, packageSrc) := false,
         resolvers += typesafe
       )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*).dependsOn(PlayProject)
+    ).dependsOn(PlayProject)
 
     lazy val SbtPluginProject = Project(
       "SBT-Plugin",
@@ -76,7 +76,7 @@ object PlayBuild extends Build {
         sbtPlugin := true,
         publishMavenStyle := false,
         libraryDependencies := sbtDependencies,
-        addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-core" % "2.0.0"),
+        //addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-core" % "2.0.0"),
         unmanagedJars in Compile ++= sbtJars,
         publishTo := Some(playIvyRepository),
         scalacOptions ++= Seq("-Xlint", "-deprecation", "-unchecked","-encoding", "utf8"),
@@ -85,7 +85,7 @@ object PlayBuild extends Build {
         publishArtifact in (Compile, packageSrc) := false,
         resolvers += typesafe
       )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*).dependsOn(PlayProject, TemplatesProject, ConsoleProject)
+    ).dependsOn(PlayProject, TemplatesProject, ConsoleProject)
 
     lazy val ConsoleProject = Project(
       "Console",
@@ -101,7 +101,7 @@ object PlayBuild extends Build {
         publishArtifact in (Compile, packageSrc) := false,
         resolvers += typesafe
       )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*)
+    )
 
     val Root = Project(
         "Root",
@@ -116,23 +116,36 @@ object PlayBuild extends Build {
             publish <<= (publish in PlayProject, publish in TemplatesProject, publish in AnormProject, publish in SbtPluginProject, publish in ConsoleProject, publish in PlayTestProject) map { (_,_,_,_,_,_) => },
             publishLocal <<= (publishLocal in PlayProject, publishLocal in TemplatesProject, publishLocal in AnormProject, publishLocal in SbtPluginProject, publishLocal in ConsoleProject, publishLocal in PlayTestProject) map { (_,_,_,_,_,_) => }
         )
-    ).settings(com.typesafe.sbtscalariform.ScalariformPlugin.defaultScalariformSettings: _*)
-     .dependsOn(PlayProject).aggregate(AnormProject, TemplatesProject, PlayProject, SbtPluginProject, ConsoleProject, PlayTestProject)
+    ).dependsOn(PlayProject).aggregate(AnormProject, TemplatesProject, PlayProject, SbtPluginProject, ConsoleProject, PlayTestProject)
 
     object BuildSettings {
 
         val buildOrganization = "play"
         val buildVersion      = Option(System.getProperty("play.version")).filterNot(_.isEmpty).getOrElse("2.0-unknown")
-        val buildScalaVersion = "2.9.1"
+        val buildScalaVersion = "2.10.0-virtualized-SNAPSHOT"
         val buildSbtVersion   = "0.11.2"
 
+        lazy val localScalaSettings = Seq[Setting[_]](
+          scalaHome <<= (baseDirectory in ThisBuild) { f =>
+          val props = new java.util.Properties()
+          val pf = f / ".." / ".." / ".." / "local.properties"
+          IO.load(props, pf)
+          val x = props.getProperty("scala.virtualized.home")
+          if (x == null)
+            sys.error("Did you forget to set scala.virtualized.home property in local.properties file? " + pf)
+          else Some(file(x))
+        }
+        )
+
         val buildSettings = Defaults.defaultSettings ++ Seq (
             organization   := buildOrganization,
             version        := buildVersion,
             scalaVersion   := buildScalaVersion,
             logManager <<= extraLoggers(PlayLogManager.default),
-            ivyLoggingLevel := UpdateLogging.DownloadOnly
-        )
+            ivyLoggingLevel := UpdateLogging.DownloadOnly,
+            resolvers += ivyDefaultLocalRepository,
+            resolvers += mavenLocal
+        ) ++ localScalaSettings
 
     }
 
@@ -160,6 +173,8 @@ object PlayBuild extends Build {
         val playLocalRepository = Resolver.file("Play Local Repository", file("../repository/local"))(Resolver.ivyStylePatterns) 
         
         val typesafe = "Typesafe Repository" at "http://repo.typesafe.com/typesafe/releases/"
+        val ivyDefaultLocalRepository = Resolver.url("Default Ivy Local Repository", url(Path.userHome.asURL + "/.ivy2/local"))(Resolver.ivyStylePatterns)
+        val mavenLocal = "Local Maven Repository" at Path.userHome.asURL + "/.m2/repository"
         
         val typesafeReleases = "Typesafe Releases Repository" at "http://repo.typesafe.com/typesafe/maven-releases/"
         val typesafeSnapshot = "Typesafe Snapshots Repository" at "http://repo.typesafe.com/typesafe/maven-snapshots/"
diff --git a/framework/project/plugins.sbt b/framework/project/plugins.sbt
index bdb7ed9..c80f299 100644
--- a/framework/project/plugins.sbt
+++ b/framework/project/plugins.sbt
@@ -2,4 +2,4 @@ logLevel := Level.Warn
 
 resolvers += Classpaths.typesafeResolver
 
-addSbtPlugin("com.typesafe.sbtscalariform" % "sbtscalariform" % "0.3.0")
+resolvers += "Local Maven Repository" at Path.userHome.asURL + "/.m2/repository"
diff --git a/framework/sbt/play.boot.properties b/framework/sbt/play.boot.properties
index 6f5db46..30b4226 100644
--- a/framework/sbt/play.boot.properties
+++ b/framework/sbt/play.boot.properties
@@ -1,5 +1,5 @@
 [scala]
-  version: 2.9.1
+  version: 2.10.0-virtualized-SNAPSHOT
 
 [app]
   org: play
@@ -9,12 +9,12 @@
   cross-versioned: true
 
 [repositories]
+  m2-local: file:///home/namin/.m2/repository
+  ivy2-local: file:///home/namin/.ivy2/local, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext]
   local
   maven-local
   typesafe-ivy-releases: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext]
   maven-central
-  scala-tools-releases
-  scala-tools-snapshots
 
 [boot]
   directory: ${play.home}/sbt/boot
diff --git a/framework/sbt/sbt.boot.properties b/framework/sbt/sbt.boot.properties
index f3c227c..264fb9b 100644
--- a/framework/sbt/sbt.boot.properties
+++ b/framework/sbt/sbt.boot.properties
@@ -1,5 +1,5 @@
 [scala]
-  version: 2.9.1
+  version: 2.10.0-virtualized-SNAPSHOT
 
 [app]
   org: org.scala-tools.sbt
@@ -10,12 +10,12 @@
   cross-versioned: true
 
 [repositories]
+  m2-local: file:///home/namin/.m2/repository
+  ivy2-local: file:///home/namin/.ivy2/local, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext]
   local
   maven-local
   typesafe-ivy-releases: http://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext]
   maven-central
-  scala-tools-releases
-  scala-tools-snapshots
 
 [boot]
   directory: ${play.home}/sbt/boot
diff --git a/framework/src/play/src/main/java/play/Application.java b/framework/src/play/src/main/java/play/Application.java
index 85a2dd7..a117b98 100644
--- a/framework/src/play/src/main/java/play/Application.java
+++ b/framework/src/play/src/main/java/play/Application.java
@@ -99,9 +99,10 @@ public class Application {
      * @return a set of types names statifying the condition
      */
     public Set<String> getTypesAnnotatedWith(String packageName, Class<? extends java.lang.annotation.Annotation> annotation) {
-        return scala.collection.JavaConverters.setAsJavaSetConverter(
-            application.getTypesAnnotatedWith(packageName, annotation)
-        ).asJava();
+        //return scala.collection.JavaConverters.setAsJavaSetConverter(
+        //    application.getTypesAnnotatedWith(packageName, annotation)
+        //).asJava();
+        throw new RuntimeException("ouch!");
     }
     
     /**
diff --git a/framework/src/play/src/main/java/play/Configuration.java b/framework/src/play/src/main/java/play/Configuration.java
index 7e9481c..04a6af9 100644
--- a/framework/src/play/src/main/java/play/Configuration.java
+++ b/framework/src/play/src/main/java/play/Configuration.java
@@ -104,7 +104,8 @@ public class Configuration {
      * @return the set of keys available in this configuration
      */
     public Set<String> keys() {
-        return JavaConverters.setAsJavaSetConverter(conf.keys()).asJava();
+        //return JavaConverters.setAsJavaSetConverter(conf.keys()).asJava();
+        throw new RuntimeException("ouch!");
     }
     
     /**
diff --git a/framework/src/play/src/main/java/play/i18n/Messages.java b/framework/src/play/src/main/java/play/i18n/Messages.java
index 26043ee..17bd4d4 100644
--- a/framework/src/play/src/main/java/play/i18n/Messages.java
+++ b/framework/src/play/src/main/java/play/i18n/Messages.java
@@ -20,8 +20,9 @@ public class Messages {
     * @return the formatted message or a default rendering if the key wasn't defined
     */
     public static String get(Lang lang, String key, Object... args) {
-        Buffer scalaArgs = scala.collection.JavaConverters.asScalaBufferConverter(Arrays.asList(args)).asScala();
-        return play.api.i18n.Messages.apply(key, scalaArgs, (play.api.i18n.Lang)lang);
+        //Buffer scalaArgs = scala.collection.JavaConverters.asScalaBufferConverter(Arrays.asList(args)).asScala();
+        //return play.api.i18n.Messages.apply(key, scalaArgs, (play.api.i18n.Lang)lang);
+        throw new RuntimeException("ouch!");
     }
     
     /**
@@ -34,8 +35,9 @@ public class Messages {
     * @return the formatted message or a default rendering if the key wasn't defined
     */
     public static String get(String key, Object... args) {
-        Buffer scalaArgs = scala.collection.JavaConverters.asScalaBufferConverter(Arrays.asList(args)).asScala();
-        return play.api.i18n.Messages.apply(key, scalaArgs, (play.api.i18n.Lang)play.mvc.Http.Context.Implicit.lang());
+        //Buffer scalaArgs = scala.collection.JavaConverters.asScalaBufferConverter(Arrays.asList(args)).asScala();
+        //return play.api.i18n.Messages.apply(key, scalaArgs, (play.api.i18n.Lang)play.mvc.Http.Context.Implicit.lang());
+        throw new RuntimeException("ouch!");
     }
     
 }
diff --git a/framework/src/play/src/main/java/play/libs/Scala.java b/framework/src/play/src/main/java/play/libs/Scala.java
index b27b8ba..4585a60 100644
--- a/framework/src/play/src/main/java/play/libs/Scala.java
+++ b/framework/src/play/src/main/java/play/libs/Scala.java
@@ -21,30 +21,34 @@ public class Scala {
      * Converts a Scala Map to Java.
      */
     public static <K,V> java.util.Map<K,V> asJava(scala.collection.Map<K,V> scalaMap) {
-       return scala.collection.JavaConverters.asJavaMapConverter(scalaMap).asJava();
+        //return scala.collection.JavaConverters.asJavaMapConverter(scalaMap).asJava();
+        throw new RuntimeException("ouch!");
     }
     
     /**
      * Converts a Java Map to Scala.
      */
     public static <A,B> scala.collection.immutable.Map<A,B> asScala(Map<A,B> javaMap) {
-        return play.utils.Conversions.newMap(
-            scala.collection.JavaConverters.asScalaMapConverter(javaMap).asScala().toSeq()
-        );
+        //return play.utils.Conversions.newMap(
+        //    scala.collection.JavaConverters.asScalaMapConverter(javaMap).asScala().toSeq()
+        //);
+        throw new RuntimeException("ouch!");
     } 
 
     /**
      * Converts a Scala List to Java.
      */
     public static <T> java.util.List<T> asJava(scala.collection.Seq<T> scalaList) {
-       return scala.collection.JavaConverters.asJavaListConverter(scalaList).asJava();
+        //return scala.collection.JavaConverters.asJavaListConverter(scalaList).asJava();
+        throw new RuntimeException("ouch!");
     }
 
     /**
      * Converts a Java List to Scala Seq.
      */
     public static <T> scala.collection.Seq<T> toSeq(java.util.List<T> list) {
-        return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList();
+        //return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList();
+        throw new RuntimeException("ouch!");
     }
 
     /**
diff --git a/framework/src/play/src/main/java/play/mvc/Results.java b/framework/src/play/src/main/java/play/mvc/Results.java
index 0ab2de0..bc9edd4 100644
--- a/framework/src/play/src/main/java/play/mvc/Results.java
+++ b/framework/src/play/src/main/java/play/mvc/Results.java
@@ -1122,11 +1122,13 @@ public class Results {
             if(content == null) {
                 throw new NullPointerException("null content");
             }
-            wrappedResult = status.stream(
-                play.core.j.JavaResults.chunked(content, chunkSize), 
-                play.core.j.JavaResults.writeBytes(),
-                play.core.j.JavaResults.contentTypeOfBytes()
-            );
+            // wrappedResult = status.stream(
+            //     play.core.j.JavaResults.chunked(content, chunkSize), 
+            //     play.core.j.JavaResults.writeBytes(),
+            //     play.core.j.JavaResults.contentTypeOfBytes()
+            // );
+            wrappedResult = null;
+            throw new RuntimeException("Should never get here. Ouch!");
         }
         
         public Status(play.api.mvc.Results.Status status, File content, int chunkSize) {
diff --git a/framework/src/play/src/main/scala/play/api/db/evolutions/Evolutions.scala b/framework/src/play/src/main/scala/play/api/db/evolutions/Evolutions.scala
index 7cbf5a4..55278d7 100644
--- a/framework/src/play/src/main/scala/play/api/db/evolutions/Evolutions.scala
+++ b/framework/src/play/src/main/scala/play/api/db/evolutions/Evolutions.scala
@@ -293,7 +293,7 @@ object Evolutions {
     val ups = (nonConflictingUps ++ conflictingUps).reverse.map(e => UpScript(e, e.sql_up))
     val downs = (nonConflictingDowns ++ conflictingDowns).map(e => DownScript(e, e.sql_down))
 
-    downs ++ ups
+    (downs ++ ups).asInstanceOf[Seq[Product with Serializable with Script]]
   }
 
   /**
diff --git a/framework/src/play/src/main/scala/play/core/j/JavaAction.scala b/framework/src/play/src/main/scala/play/core/j/JavaAction.scala
index 60a7db5..76602bd 100644
--- a/framework/src/play/src/main/scala/play/core/j/JavaAction.scala
+++ b/framework/src/play/src/main/scala/play/core/j/JavaAction.scala
@@ -38,12 +38,12 @@ trait JavaAction extends Action[play.mvc.Http.RequestBody] with JavaHelpers {
     }
 
     // Wrap into user defined Global action
-    val baseAction = play.api.Play.maybeApplication.map { app =>
+    val baseAction: JAction[Any] = play.api.Play.maybeApplication.map { app =>
       app.global match {
         case global: JavaGlobalSettingsAdapter => {
           val action = global.underlying.onRequest(javaContext.request, method)
           action.delegate = rootAction
-          action
+          action.asInstanceOf[JAction[Any]]
         }
         case _ => rootAction
       }
@@ -62,9 +62,9 @@ trait JavaAction extends Action[play.mvc.Http.RequestBody] with JavaHelpers {
       }.flatten.reverse
     }
 
-    val finalAction = actionMixins.foldLeft[JAction[_ <: Any]](baseAction) {
+    val finalAction = actionMixins.foldLeft[JAction[Any]](baseAction) {
       case (delegate, (annotation, actionClass)) => {
-        val action = actionClass.newInstance
+        val action = actionClass.newInstance().asInstanceOf[JAction[Any]]
         action.configuration = annotation
         action.delegate = delegate
         action
diff --git a/framework/src/play/src/main/scala/play/core/server/netty/Helpers.scala b/framework/src/play/src/main/scala/play/core/server/netty/Helpers.scala
index 4b6f63d..9135bbb 100644
--- a/framework/src/play/src/main/scala/play/core/server/netty/Helpers.scala
+++ b/framework/src/play/src/main/scala/play/core/server/netty/Helpers.scala
@@ -46,7 +46,7 @@ private[netty] trait Helpers {
     }.toMap
 
     new Headers {
-      def getAll(key: String) = headers.get(key.toUpperCase).flatten.toSeq
+      def getAll(key: String) = headers.get(key.toUpperCase).toSeq.flatten
       def keys = headers.keySet
       override def toString = headers.toString
     }
diff --git a/framework/src/sbt-plugin/src/main/scala/PlayCommands.scala b/framework/src/sbt-plugin/src/main/scala/PlayCommands.scala
index d8c09da..bbd8ebc 100644
--- a/framework/src/sbt-plugin/src/main/scala/PlayCommands.scala
+++ b/framework/src/sbt-plugin/src/main/scala/PlayCommands.scala
@@ -192,25 +192,25 @@ exec java $* -cp "`dirname $0`/lib/*" """ + config.map(_ => "-Dconfig.file=`dirn
     zip
   }
 
-  /**
-   * provides Settings for the eclipse project
-   * @param mainLang mainly scala or java?
-   */
-  def eclipseCommandSettings(mainLang: String) = {
-    import com.typesafe.sbteclipse.core._
-    import com.typesafe.sbteclipse.core.EclipsePlugin._
-    def transformerFactory =
-      new EclipseClasspathEntryTransformerFactory {
-        override def createTransformer(ref: ProjectRef, state: State) =
-          setting(crossTarget in ref)(state) map (ct =>
-            (entries: Seq[EclipseClasspathEntry]) => entries :+ EclipseClasspathEntry.Lib(ct + java.io.File.separator + "classes_managed")
-          )
-      }
-    EclipsePlugin.eclipseSettings ++ Seq(EclipseKeys.commandName := "eclipsify",
-      EclipseKeys.createSrc := EclipseCreateSrc.Default,
-      EclipseKeys.preTasks := Seq(compile in Compile),
-      EclipseKeys.classpathEntryTransformerFactory := transformerFactory)
-  }
+  // /**
+  //  * provides Settings for the eclipse project
+  //  * @param mainLang mainly scala or java?
+  //  */
+  // def eclipseCommandSettings(mainLang: String) = {
+  //   import com.typesafe.sbteclipse.core._
+  //   import com.typesafe.sbteclipse.core.EclipsePlugin._
+  //   def transformerFactory =
+  //     new EclipseClasspathEntryTransformerFactory {
+  //       override def createTransformer(ref: ProjectRef, state: State) =
+  //         setting(crossTarget in ref)(state) map (ct =>
+  //           (entries: Seq[EclipseClasspathEntry]) => entries :+ EclipseClasspathEntry.Lib(ct + java.io.File.separator + "classes_managed")
+  //         )
+  //     }
+  //   EclipsePlugin.eclipseSettings ++ Seq(EclipseKeys.commandName := "eclipsify",
+  //     EclipseKeys.createSrc := EclipseCreateSrc.Default,
+  //     EclipseKeys.preTasks := Seq(compile in Compile),
+  //     EclipseKeys.classpathEntryTransformerFactory := transformerFactory)
+  // }
 
   // -- Intellij
 
@@ -987,14 +987,14 @@ exec java $* -cp "`dirname $0`/lib/*" """ + config.map(_ => "-Dconfig.file=`dirn
               case callers @ Seq(_*) => callers.map {
                 case (org, name, rev) => org + ":" + name + ":" + rev
               }
-            }.flatten.toSeq,
+            }.toSeq.flatten,
 
             module.get('evictedBy).map {
               case Some(rev) => Seq("Evicted by " + rev)
               case None => module.get('artifacts).map {
                 case artifacts: Seq[String] => artifacts.map("As " + _)
-              }.flatten
-            }.flatten.toSeq)
+              }.toSeq.flatten
+            }.toSeq.flatten)
           val maxLines = Seq(formatted._1.size, formatted._2.size, formatted._3.size).max
 
           formatted._1.padTo(maxLines, "").zip(
diff --git a/framework/src/sbt-plugin/src/main/scala/PlayProject.scala b/framework/src/sbt-plugin/src/main/scala/PlayProject.scala
index 8e499ba..42542f0 100644
--- a/framework/src/sbt-plugin/src/main/scala/PlayProject.scala
+++ b/framework/src/sbt-plugin/src/main/scala/PlayProject.scala
@@ -38,7 +38,7 @@ object PlayProject extends Plugin with PlayExceptions with PlayKeys with PlayRel
 
     
     lazy val playSettings = 
-      PlayProject.defaultSettings ++ eclipseCommandSettings(mainLang) ++ Seq(testListeners += testListener) ++ whichLang(mainLang) ++ Seq(
+      PlayProject.defaultSettings ++ Seq(testListeners += testListener) ++ whichLang(mainLang) ++ Seq(
         scalacOptions ++= Seq("-deprecation", "-unchecked", "-Xcheckinit", "-encoding", "utf8"),
         javacOptions ++= Seq("-encoding", "utf8", "-g"),
         version := applicationVersion,
