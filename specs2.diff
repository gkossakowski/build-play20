diff --git a/build.sbt b/build.sbt
index 04bc7d9..7b5ff29 100644
--- a/build.sbt
+++ b/build.sbt
@@ -9,7 +9,19 @@ version := "1.7.1"
 
 organization := "org.specs2"
 
-scalaVersion := "2.9.1"
+scalaHome <<= baseDirectory { f =>
+  //val scalaVirtualizedHome = SettingKey[File]("scala-virtualized-home","Location of local Scala virtualized checkout")
+  val props = new java.util.Properties()
+  IO.load(props, f / ".." / ".." / "local.properties")
+  val x = props.getProperty("scala.virtualized.home")
+  if (x == null)
+    sys.error("Did you forget to set scala.virtualized.home property in local.properties file?")
+  else Some(file(x))
+}
+
+scalaVersion := "2.10.0-virtualized-SNAPSHOT"
+
+publishArtifact in (Compile, packageDoc) := false
 
 crossScalaVersions := Seq("2.9.0")
 
@@ -19,11 +31,11 @@ shellPrompt := { state => System.getProperty("user.name") + "> " }
 shellPrompt in ThisBuild := { state => Project.extract(state).currentRef.project + "> " }
 
 /** Dependencies */
-resolvers ++= Seq("snapshots-repo" at "http://scala-tools.org/repo-snapshots", 
-                  "Local Maven Repository" at "file://c:/Documents and Settings/Eric/.m2/repository")
+//needed because Sbt first tries to resolve the dependency and only then uses scalaHome...
+resolvers += "Local Maven Repository" at Path.userHome.asURL + "/.m2/repository"
 
 libraryDependencies <<= scalaVersion { scala_version => Seq(
-  "org.specs2" %% "specs2-scalaz-core" % "6.0.1",
+  "org.specs2" % "specs2-scalaz-core_2.9.1" % "6.0.1",
   "org.scala-lang" % "scala-compiler" % scala_version % "optional", 
   "org.scala-tools.testing" %% "scalacheck" % "1.9" % "optional", 
   "org.scala-tools.testing" % "test-interface" % "0.5" % "optional", 
@@ -66,14 +78,14 @@ releaseProcess <<= thisProjectRef apply { ref =>
   Seq[ReleasePart](
     initialGitChecks,                     
     checkSnapshotDependencies,    
-    releaseTask(check in Posterous in ref),  
+    //releaseTask(check in Posterous in ref),  
     inquireVersions,                        
     setReleaseVersion,                      
     runTest,                                
     commitReleaseVersion,                   
     tagRelease,                             
     releaseTask(publish in Global in ref),
-    releaseTask(publish in Posterous in ref),    
+    //releaseTask(publish in Posterous in ref),    
     setNextVersion,                         
     commitNextVersion                       
   )
diff --git a/src/main/scala/org/specs2/reporter/HtmlPrinter.scala b/src/main/scala/org/specs2/reporter/HtmlPrinter.scala
index d12b539..ddfc980 100644
--- a/src/main/scala/org/specs2/reporter/HtmlPrinter.scala
+++ b/src/main/scala/org/specs2/reporter/HtmlPrinter.scala
@@ -105,7 +105,7 @@ trait HtmlPrinter {
   implicit object HtmlReducer extends Reducer[ExecutedFragment, Seq[HtmlLine]] {
     implicit override def unit(fragment: ExecutedFragment) = Seq(print(fragment))
     /** print an ExecutedFragment and its associated statistics */
-    def print(fragment: ExecutedFragment) = fragment match { 
+    def print(fragment: ExecutedFragment): HtmlLine = fragment match { 
       case start @ ExecutedSpecStart(_,_,_)       => HtmlSpecStart(start)
       case result @ ExecutedResult(_,_,_,_,_)     => HtmlResult(result)
       case text @ ExecutedText(s, _)              => HtmlText(text)
@@ -132,4 +132,4 @@ case class TreeToc(rootCode: Int, toc: NodeSeq) {
       <script>{"""$(function () {	$('#tree').jstree({'core':{'initially_open':['"""+rootCode+"','"+currentCode+"""'], 'animation':200}, 'plugins':['themes', 'html_data']}); });"""}</script>
     </div>
 
-}
\ No newline at end of file
+}
diff --git a/src/main/scala/org/specs2/specification/Fragments.scala b/src/main/scala/org/specs2/specification/Fragments.scala
index f1e904c..312de78 100644
--- a/src/main/scala/org/specs2/specification/Fragments.scala
+++ b/src/main/scala/org/specs2/specification/Fragments.scala
@@ -12,7 +12,7 @@ import Fragments._
 /**
  * A Fragments object is a list of fragments with a SpecStart and a SpecEnd
  */
-case class Fragments(private val title: Option[SpecName] = None, middle: Seq[Fragment] = Vector(), arguments: Arguments = Arguments(), link: Option[HtmlLink] = None, seeOnly: Boolean = false) {
+case class Fragments(title: Option[SpecName] = None, middle: Seq[Fragment] = Vector(), arguments: Arguments = Arguments(), link: Option[HtmlLink] = None, seeOnly: Boolean = false) {
   def fragments: Seq[Fragment] = if (middle.isEmpty && !link.isDefined) Seq() else (start +: middle :+ end)
 
   private def append(e: Fragment) = copy(middle = middle :+ e)
