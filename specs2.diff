diff --git a/specs2.sbt b/specs2.sbt
index fc7f7ca..2ad156f 100644
--- a/specs2.sbt
+++ b/specs2.sbt
@@ -5,7 +5,19 @@ version := "1.6.1"
 
 organization := "org.specs2"
 
-scalaVersion := "2.9.1"
+scalaHome <<= baseDirectory { f =>
+  //val scalaVirtualizedHome = SettingKey[File]("scala-virtualized-home","Location of local Scala virtualized checkout")
+  val props = new java.util.Properties()
+  IO.load(props, f / ".." / ".." / "local.properties")
+  val x = props.getProperty("scala.virtualized.home")
+  if (x == null)
+    sys.error("Did you forget to set scala.virtualized.home property in local.properties file?")
+  else Some(file(x))
+}
+
+scalaVersion := "2.10.0-virtualized-SNAPSHOT"
+
+publishArtifact in (Compile, packageDoc) := false
 
 crossScalaVersions := Seq("2.9.0", "2.9.0-1") ++ (1 to 4).map(i => "2.9.1.RC"+i)
 
@@ -21,7 +33,7 @@ resolvers ++= Seq("snapshots-repo" at "http://scala-tools.org/repo-snapshots",
 libraryDependencies ++= Seq(
   "org.scala-tools.testing" %% "scalacheck" % "1.9" % "optional", 
   "org.scala-tools.testing" % "test-interface" % "0.5" % "optional", 
-  "org.specs2" %% "specs2-scalaz-core" % "6.0.1",
+  "org.specs2" % "specs2-scalaz-core_2.9.1" % "6.0.1",
   "org.hamcrest" % "hamcrest-all" % "1.1" % "optional",
   "org.mockito" % "mockito-all" % "1.8.5" % "optional",
   "junit" % "junit" % "4.7" % "optional",
diff --git a/src/main/scala/org/specs2/matcher/ScalaCheckMatchers.scala b/src/main/scala/org/specs2/matcher/ScalaCheckMatchers.scala
index c546233..1796241 100644
--- a/src/main/scala/org/specs2/matcher/ScalaCheckMatchers.scala
+++ b/src/main/scala/org/specs2/matcher/ScalaCheckMatchers.scala
@@ -25,14 +25,14 @@ trait ScalaCheckMatchers extends ConsoleOutput with ScalaCheckFunctions with Sca
    * transform a Function returning a MatchResult (or anything which can be converted to a Prop) as a ScalaCheck property
    */
   def check[T, R](result: T => R)(implicit toProp: R => Prop, a: Arbitrary[T], s: Shrink[T]): Prop = check1(result)
-  implicit def check1[T, R](result: T => R)(implicit toProp: R => Prop, a: Arbitrary[T], s: Shrink[T]): Prop = Prop.forAll((t: T) => result(t))
+  def check1[T, R](result: T => R)(implicit toProp: R => Prop, a: Arbitrary[T], s: Shrink[T]): Prop = Prop.forAll((t: T) => result(t))
 
   def check[T1, T2, R](result: (T1, T2) => R)(implicit toProp: R => Prop, a1: Arbitrary[T1], s1: Shrink[T1], a2: Arbitrary[T2], s2: Shrink[T2]): Prop = check2(result)
   implicit def check2[T1, T2, R](result: (T1, T2) => R)(implicit toProp: R => Prop, a1: Arbitrary[T1], s1: Shrink[T1], a2: Arbitrary[T2], s2: Shrink[T2]): Prop =
     Prop.forAll((t1: T1, t2: T2) => result(t1, t2))
 
   def check[T1, T2, T3, R](result: (T1, T2, T3) => R)(implicit toProp: R => Prop, a1: Arbitrary[T1], s1: Shrink[T1], a2: Arbitrary[T2], s2: Shrink[T2], a3: Arbitrary[T3], s3: Shrink[T3]): Prop = check3(result)
-  implicit def check3[T1, T2, T3, R](result: (T1, T2, T3) => R)(implicit toProp: R => Prop, a1: Arbitrary[T1], s1: Shrink[T1], a2: Arbitrary[T2], s2: Shrink[T2], a3: Arbitrary[T3], s3: Shrink[T3]): Prop =
+  def check3[T1, T2, T3, R](result: (T1, T2, T3) => R)(implicit toProp: R => Prop, a1: Arbitrary[T1], s1: Shrink[T1], a2: Arbitrary[T2], s2: Shrink[T2], a3: Arbitrary[T3], s3: Shrink[T3]): Prop =
     Prop.forAll((t1: T1, t2: T2, t3: T3) => result(t1, t2, t3))
 
   def check[T1, T2, T3, T4, R](result: (T1, T2, T3, T4) => R)(implicit toProp: R => Prop, a1: Arbitrary[T1], s1: Shrink[T1], a2: Arbitrary[T2], s2: Shrink[T2], a3: Arbitrary[T3], s3: Shrink[T3], a4: Arbitrary[T4], s4: Shrink[T4]): Prop = check4(result)
diff --git a/src/main/scala/org/specs2/reporter/HtmlPrinter.scala b/src/main/scala/org/specs2/reporter/HtmlPrinter.scala
index efebf9d..5c0b50e 100644
--- a/src/main/scala/org/specs2/reporter/HtmlPrinter.scala
+++ b/src/main/scala/org/specs2/reporter/HtmlPrinter.scala
@@ -120,7 +120,7 @@ trait HtmlPrinter extends OutputDir {
   implicit object HtmlReducer extends Reducer[ExecutedFragment, List[Html]] {
     implicit override def unit(fragment: ExecutedFragment) = List(print(fragment)) 
     /** print an ExecutedFragment and its associated statistics */
-    def print(fragment: ExecutedFragment) = fragment match { 
+    def print(fragment: ExecutedFragment): Html = fragment match { 
       case start @ ExecutedSpecStart(_,_,_)       => HtmlSpecStart(start)
       case result @ ExecutedResult(_,_,_,_,_)     => HtmlResult(result)
       case text @ ExecutedText(s, _)              => HtmlText(text)
diff --git a/src/main/scala/org/specs2/specification/Fragments.scala b/src/main/scala/org/specs2/specification/Fragments.scala
index 3ef1d9e..ca42978 100644
--- a/src/main/scala/org/specs2/specification/Fragments.scala
+++ b/src/main/scala/org/specs2/specification/Fragments.scala
@@ -11,7 +11,7 @@ import Fragments._
 /**
  * A Fragments object is a list of fragments with a SpecStart and a SpecEnd
  */
-case class Fragments(private val title: Option[SpecName] = None, middle: Seq[Fragment] = Nil, arguments: Arguments = Arguments(), link: Option[HtmlLink] = None, seeOnly: Boolean = false) {
+case class Fragments(title: Option[SpecName] = None, middle: Seq[Fragment] = Nil, arguments: Arguments = Arguments(), link: Option[HtmlLink] = None, seeOnly: Boolean = false) {
   def fragments: Seq[Fragment] = if (middle.isEmpty && !link.isDefined) Seq() else (start +: middle :+ end)
 
   private def append(e: Fragment) = copy(middle = middle :+ e)
diff --git a/src/main/scala/org/specs2/specification/FragmentsBuilder.scala b/src/main/scala/org/specs2/specification/FragmentsBuilder.scala
index 1ba8631..87a1db1 100644
--- a/src/main/scala/org/specs2/specification/FragmentsBuilder.scala
+++ b/src/main/scala/org/specs2/specification/FragmentsBuilder.scala
@@ -125,7 +125,8 @@ class FragmentsFragment(fs: =>Fragments) {
 
   def ^(other: Fragments) = {
     other match {
-      case Fragments(t, m, a, Some(l), so)    => fs add other.fragments
+			//work-around for some weird bug related to default arguments, extractors and AnyVals...
+      case Fragments(t, m, a, Some(l), so) => fs add other.fragments 
       case Fragments(Some(t), m, a, None, so) => (fs add other.middle).specTitleIs(t).overrideArgs(a)
       case Fragments(None, m, a, None, so)    => (fs add other.middle).overrideArgs(a)
       case _                                  => fs add other.middle
