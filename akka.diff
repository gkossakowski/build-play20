diff --git a/project/AkkaBuild.scala b/project/AkkaBuild.scala
index 11cf1da..bcbb0bd 100644
--- a/project/AkkaBuild.scala
+++ b/project/AkkaBuild.scala
@@ -20,7 +20,11 @@ object AkkaBuild extends Build {
   lazy val buildSettings = Seq(
     organization := "com.typesafe.akka",
     version      := "2.0.2",
-    scalaVersion := "2.9.2"
+    scalaVersion := "2.10.0-virtualized-SNAPSHOT"
+  )
+
+  lazy val localScalaSettings = Seq[Setting[_]](
+    resolvers += "Local Maven Repository" at Path.userHome.asURL + "/.m2/repository"
   )
 
   lazy val akka = Project(
@@ -28,13 +32,10 @@ object AkkaBuild extends Build {
     base = file("."),
     settings = parentSettings ++ Release.settings ++ Unidoc.settings ++ Rstdoc.settings ++ Publish.versionSettings ++
       Dist.settings ++ mimaSettings ++ Seq(
-      testMailbox in GlobalScope := System.getProperty("akka.testMailbox", "false").toBoolean,
       parallelExecution in GlobalScope := System.getProperty("akka.parallelExecution", "false").toBoolean,
-      Publish.defaultPublishTo in ThisBuild <<= crossTarget / "repository",
-      Unidoc.unidocExclude := Seq(samples.id, tutorials.id),
-      Dist.distExclude := Seq(actorTests.id, akkaSbtPlugin.id, docs.id)
-    ),
-    aggregate = Seq(actor, testkit, actorTests, remote, slf4j, agent, transactor, mailboxes, zeroMQ, kernel, akkaSbtPlugin, actorMigration, samples, tutorials, docs)
+      Publish.defaultPublishTo in ThisBuild <<= crossTarget / "repository"
+    ) ++ localScalaSettings,
+    aggregate = Seq(actor, slf4j)
   )
 
   lazy val actor = Project(
@@ -50,296 +51,12 @@ object AkkaBuild extends Build {
     )
   )
 
-  lazy val testkit = Project(
-    id = "akka-testkit",
-    base = file("akka-testkit"),
-    dependencies = Seq(actor),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.testkit,
-      previousArtifact := akkaPreviousArtifact("akka-testkit")
-    )
-  )
-
-  lazy val actorTests = Project(
-    id = "akka-actor-tests",
-    base = file("akka-actor-tests"),
-    dependencies = Seq(testkit % "compile;test->test"),
-    settings = defaultSettings ++ Seq(
-      autoCompilerPlugins := true,
-      libraryDependencies <+= scalaVersion { v => compilerPlugin("org.scala-lang.plugins" % "continuations" % v) },
-      scalacOptions += "-P:continuations:enable",
-      libraryDependencies ++= Dependencies.actorTests
-    )
-  )
-
-  lazy val remote = Project(
-    id = "akka-remote",
-    base = file("akka-remote"),
-    dependencies = Seq(actor, actorTests % "test->test", testkit % "test->test"),
-    settings = defaultSettings ++ multiJvmSettings ++ Seq(
-      libraryDependencies ++= Dependencies.remote,
-      // disable parallel tests
-      parallelExecution in Test := false,
-      extraOptions in MultiJvm <<= (sourceDirectory in MultiJvm) { src =>
-        (name: String) => (src ** (name + ".conf")).get.headOption.map("-Dakka.config=" + _.absolutePath).toSeq
-      },
-      scalatestOptions in MultiJvm := Seq("-r", "org.scalatest.akka.QuietReporter"),
-      jvmOptions in MultiJvm := {
-        if (getBoolean("sbt.log.noformat")) Seq("-Dakka.test.nocolor=true") else Nil
-      },
-      test in Test <<= (test in Test) dependsOn (test in MultiJvm),
-      previousArtifact := akkaPreviousArtifact("akka-remote")
-    )
-  ) configs (MultiJvm)
-
-  // lazy val cluster = Project(
-  //   id = "akka-cluster",
-  //   base = file("akka-cluster"),
-  //   dependencies = Seq(remote, remote % "test->test", testkit % "test->test"),
-  //   settings = defaultSettings ++ multiJvmSettings ++ Seq(
-  //     libraryDependencies ++= Dependencies.cluster,
-  //     // disable parallel tests
-  //     parallelExecution in Test := false,
-  //     extraOptions in MultiJvm <<= (sourceDirectory in MultiJvm) { src =>
-  //       (name: String) => (src ** (name + ".conf")).get.headOption.map("-Dakka.config=" + _.absolutePath).toSeq
-  //     },
-  //     scalatestOptions in MultiJvm := Seq("-r", "org.scalatest.akka.QuietReporter"),
-  //     jvmOptions in MultiJvm := {
-  //       if (getBoolean("sbt.log.noformat")) Seq("-Dakka.test.nocolor=true") else Nil
-  //     },
-  //     test in Test <<= (test in Test) dependsOn (test in MultiJvm)
-  //   )
-  // ) configs (MultiJvm)
-
   lazy val slf4j = Project(
     id = "akka-slf4j",
     base = file("akka-slf4j"),
-    dependencies = Seq(actor, testkit % "test->test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.slf4j
-    )
-  )
-
-  lazy val agent = Project(
-    id = "akka-agent",
-    base = file("akka-agent"),
-    dependencies = Seq(actor, testkit % "test->test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.agent,
-      previousArtifact := akkaPreviousArtifact("akka-agent")
-    )
-  )
-
-  lazy val transactor = Project(
-    id = "akka-transactor",
-    base = file("akka-transactor"),
-    dependencies = Seq(actor, testkit % "test->test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.transactor,
-      previousArtifact := akkaPreviousArtifact("akka-transactor")
-    )
-  )
-
-  // lazy val amqp = Project(
-  //   id = "akka-amqp",
-  //   base = file("akka-amqp"),
-  //   dependencies = Seq(actor, testkit % "test->test"),
-  //   settings = defaultSettings ++ Seq(
-  //     libraryDependencies ++= Dependencies.amqp
-  //   )
-  // )
-
-  val testMailbox = SettingKey[Boolean]("test-mailbox")
-
-  lazy val mailboxes = Project(
-    id = "akka-durable-mailboxes",
-    base = file("akka-durable-mailboxes"),
-    settings = parentSettings,
-    aggregate = Seq(mailboxesCommon, fileMailbox, mongoMailbox, redisMailbox, beanstalkMailbox, zookeeperMailbox)
-  )
-
-  lazy val mailboxesCommon = Project(
-    id = "akka-mailboxes-common",
-    base = file("akka-durable-mailboxes/akka-mailboxes-common"),
-    dependencies = Seq(remote, testkit % "compile;test->test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.mailboxes,
-      previousArtifact := akkaPreviousArtifact("akka-mailboxes-common")
-    )
-  )
-
-  val testBeanstalkMailbox = SettingKey[Boolean]("test-beanstalk-mailbox")
-
-  lazy val beanstalkMailbox = Project(
-    id = "akka-beanstalk-mailbox",
-    base = file("akka-durable-mailboxes/akka-beanstalk-mailbox"),
-    dependencies = Seq(mailboxesCommon % "compile;test->test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.beanstalkMailbox,
-      testOptions in Test <+= testMailbox map { test => Tests.Filter(s => test) },
-      previousArtifact := akkaPreviousArtifact("akka-beanstalk-mailbox")
-    )
-  )
-
-  lazy val fileMailbox = Project(
-    id = "akka-file-mailbox",
-    base = file("akka-durable-mailboxes/akka-file-mailbox"),
-    dependencies = Seq(mailboxesCommon % "compile;test->test", testkit % "test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.fileMailbox,
-      previousArtifact := akkaPreviousArtifact("akka-file-mailbox")
-    )
-  )
-
-  lazy val redisMailbox = Project(
-    id = "akka-redis-mailbox",
-    base = file("akka-durable-mailboxes/akka-redis-mailbox"),
-    dependencies = Seq(mailboxesCommon % "compile;test->test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.redisMailbox,
-      testOptions in Test <+= testMailbox map { test => Tests.Filter(s => test) },
-      previousArtifact := akkaPreviousArtifact("akka-redis-mailbox")
-    )
-  )
-
-  lazy val zookeeperMailbox = Project(
-    id = "akka-zookeeper-mailbox",
-    base = file("akka-durable-mailboxes/akka-zookeeper-mailbox"),
-    dependencies = Seq(mailboxesCommon % "compile;test->test", testkit % "test"),
-    settings = defaultSettings  ++ Seq(
-      libraryDependencies ++= Dependencies.zookeeperMailbox,
-      previousArtifact := akkaPreviousArtifact("akka-zookeeper-mailbox")
-    )
-  )
-
-  lazy val mongoMailbox = Project(
-    id = "akka-mongo-mailbox",
-    base = file("akka-durable-mailboxes/akka-mongo-mailbox"),
-    dependencies = Seq(mailboxesCommon % "compile;test->test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.mongoMailbox,
-      ivyXML := Dependencies.mongoMailboxExcludes,
-      testOptions in Test <+= testMailbox map { test => Tests.Filter(s => test) },
-      previousArtifact := akkaPreviousArtifact("akka-mongo-mailbox")
-    )
-  )
-
-
-  lazy val zeroMQ = Project(
-    id = "akka-zeromq",
-    base = file("akka-zeromq"),
-    dependencies = Seq(actor, testkit % "test;test->test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.zeroMQ,
-      previousArtifact := akkaPreviousArtifact("akka-zeromq")
-    )
-  )
-
-
-  // lazy val spring = Project(
-  //   id = "akka-spring",
-  //   base = file("akka-spring"),
-  //   dependencies = Seq(cluster, camel),
-  //   settings = defaultSettings ++ Seq(
-  //     libraryDependencies ++= Dependencies.spring
-  //   )
-  // )
-
-  lazy val kernel = Project(
-    id = "akka-kernel",
-    base = file("akka-kernel"),
-    dependencies = Seq(actor, testkit % "test->test"),
-    settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.kernel,
-      previousArtifact := akkaPreviousArtifact("akka-kernel")
-    )
-  )
-
-  lazy val actorMigration = Project(
-    id = "akka-actor-migration",
-    base = file("akka-actor-migration"),
-    dependencies = Seq(actor, testkit % "test->test"),
-    settings = defaultSettings ++ Seq(
-      previousArtifact := akkaPreviousArtifact("akka-actor-migration")
-    )
-  )
-
-  lazy val akkaSbtPlugin = Project(
-    id = "akka-sbt-plugin",
-    base = file("akka-sbt-plugin"),
-    settings = defaultSettings ++ Seq(
-      sbtPlugin := true,
-      scalaVersion := "2.9.1"
-    )
-  )
-
-  lazy val samples = Project(
-    id = "akka-samples",
-    base = file("akka-samples"),
-    settings = parentSettings,
-    aggregate = Seq(fsmSample, helloSample, helloKernelSample, remoteSample)
-  )
-
-  lazy val fsmSample = Project(
-    id = "akka-sample-fsm",
-    base = file("akka-samples/akka-sample-fsm"),
-    dependencies = Seq(actor),
-    settings = defaultSettings
-  )
-
-  lazy val helloSample = Project(
-    id = "akka-sample-hello",
-    base = file("akka-samples/akka-sample-hello"),
     dependencies = Seq(actor),
-    settings = defaultSettings
-  )
-
-  lazy val helloKernelSample = Project(
-    id = "akka-sample-hello-kernel",
-    base = file("akka-samples/akka-sample-hello-kernel"),
-    dependencies = Seq(kernel),
-    settings = defaultSettings
-  )
-
-  lazy val remoteSample = Project(
-    id = "akka-sample-remote",
-    base = file("akka-samples/akka-sample-remote"),
-    dependencies = Seq(actor, remote, kernel),
-    settings = defaultSettings
-  )
-
-  lazy val tutorials = Project(
-    id = "akka-tutorials",
-    base = file("akka-tutorials"),
-    settings = parentSettings,
-    aggregate = Seq(firstTutorial)
-  )
-
-  lazy val firstTutorial = Project(
-    id = "akka-tutorial-first",
-    base = file("akka-tutorials/akka-tutorial-first"),
-    dependencies = Seq(actor, testkit),
     settings = defaultSettings ++ Seq(
-      libraryDependencies ++= Dependencies.tutorials
-    )
-  )
-
-  //  lazy val secondTutorial = Project(
-  //    id = "akka-tutorial-second",
-  //    base = file("akka-tutorials/akka-tutorial-second"),
-  //    dependencies = Seq(actor),
-  //    settings = defaultSettings
-  //  )
-
-  lazy val docs = Project(
-    id = "akka-docs",
-    base = file("akka-docs"),
-    dependencies = Seq(actor, testkit % "test->test", remote, slf4j, agent, transactor,
-        fileMailbox, mongoMailbox, redisMailbox, beanstalkMailbox, zookeeperMailbox, zeroMQ),
-    settings = defaultSettings ++ Seq(
-      unmanagedSourceDirectories in Test <<= baseDirectory { _ ** "code" get },
-      libraryDependencies ++= Dependencies.docs,
-      unmanagedSourceDirectories in ScalariformKeys.format in Test <<= unmanagedSourceDirectories in Test
+      libraryDependencies ++= Dependencies.slf4j
     )
   )
 
@@ -362,7 +79,7 @@ object AkkaBuild extends Build {
 
   val defaultExcludedTags = Seq("timing")
 
-  lazy val defaultSettings = baseSettings ++ formatSettings ++ mimaSettings ++ Seq(
+  lazy val defaultSettings = baseSettings ++ formatSettings ++ mimaSettings ++ localScalaSettings ++ Seq(
     resolvers += "Typesafe Repo" at "http://repo.typesafe.com/typesafe/releases/",
 
     // compile options
@@ -444,64 +161,8 @@ object AkkaBuild extends Build {
 object Dependencies {
   import Dependency._
 
-  val testkit = Seq(Test.scalatest, Test.junit)
-
-  val actorTests = Seq(
-    Test.junit, Test.scalatest, Test.commonsMath, Test.mockito,
-    Test.scalacheck, protobuf, jacksonMapper
-  )
-
-  val remote = Seq(
-    netty, protobuf, sjson, h2Lzf, Test.junit, Test.scalatest,
-    Test.zookeeper, Test.log4j // needed for ZkBarrier in multi-jvm tests
-  )
-
- val cluster = Seq(Test.junit, Test.scalatest)
-
   val slf4j = Seq(slf4jApi, Test.logback)
 
-  val agent = Seq(scalaStm, Test.scalatest, Test.junit)
-
-  val transactor = Seq(scalaStm, Test.scalatest, Test.junit)
-
-  val amqp = Seq(rabbit, commonsIo, protobuf)
-
-  val mailboxes = Seq(Test.scalatest, Test.junit)
-
-  val fileMailbox = Seq(commonsIo, Test.scalatest, Test.junit)
-
-  val beanstalkMailbox = Seq(beanstalk, Test.junit)
-
-  val redisMailbox = Seq(slf4jApi, redis, Test.junit)
-
-  val mongoMailbox = Seq(slf4jApi, commonsPool, mongoAsync, twttrUtilCore, Test.junit)
-
-  val mongoMailboxExcludes = {
-    <dependencies>
-      <dependency org="com.mongodb.async" name="bson-driver_2.9.0-1" rev="0.2.9-1" >
-        <exclude module="netty"/>
-      </dependency>
-      <dependency org="com.mongodb.async" name="mongo-driver_2.9.0-1" rev="0.2.9-1" >
-        <exclude module="netty"/>
-      </dependency>
-    </dependencies>
-  }
-
-  val zookeeperMailbox = Seq(zkClient, zookeeper, commonsIo, Test.junit)
-
-  val spring = Seq(springBeans, springContext, Test.junit, Test.scalatest)
-
-  val kernel = Seq(Test.scalatest, Test.junit)
-
-  // TODO: resolve Jetty version conflict
-  // val sampleCamel = Seq(camelCore, camelSpring, commonsCodec, Runtime.camelJms, Runtime.activemq, Runtime.springJms,
-  //   Test.junit, Test.scalatest, Test.logback)
-
-  val tutorials = Seq(Test.scalatest, Test.junit)
-
-  val docs = Seq(Test.scalatest, Test.junit)
-
-  val zeroMQ = Seq(Test.scalatest, Test.junit, protobuf, Dependency.zeroMQ)
 }
 
 object Dependency {
@@ -585,8 +246,8 @@ object Dependency {
     val junit       = "junit"                       % "junit"               % "4.5"        % "test" // Common Public License 1.0
     val logback     = "ch.qos.logback"              % "logback-classic"     % V.Logback    % "test" // EPL 1.0 / LGPL 2.1
     val mockito     = "org.mockito"                 % "mockito-all"         % "1.8.1"      % "test" // MIT
-    val scalatest   = "org.scalatest"               % "scalatest_2.9.1"     % V.Scalatest  % "test" // ApacheV2
-    val scalacheck  = "org.scala-tools.testing"     % "scalacheck_2.9.1"    % "1.9"        % "test" // New BSD
+    //val scalatest   = "org.scalatest"               % "scalatest_2.9.1"     % V.Scalatest  % "test" // ApacheV2
+    //val scalacheck  = "org.scala-tools.testing"     % "scalacheck_2.9.1"    % "1.9"        % "test" // New BSD
     val zookeeper   = "org.apache.hadoop.zookeeper" % "zookeeper"           % V.Zookeeper  % "test" // ApacheV2
     val log4j       = "log4j"                       % "log4j"               % "1.2.14"     % "test" // ApacheV2
   }
